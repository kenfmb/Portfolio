AWSTemplateFormatVersion: 2010-09-09
Description: Create EC2 RDS ALB S3

Parameters:
  NameBase:
    Description: NameBase
    Type: String
    Default: lecture10

  InstanceType:
    Description: webserver EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: Mykeypair.pem

Resources:
  # EC2作成
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      ImageId: ami-03d25459ad01ac2b9
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !ImportValue EC2SecurityGroup
          SubnetId: !ImportValue PublicSubnet1AID
      IamInstanceProfile: !Ref lecture10EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-ec2

      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum update -y
          yum install -y mysql
          echo "[client]" > /home/ec2-user/.my.cnf
          echo "user=lecture10" >> /home/ec2-user/.my.cnf
          echo "password=lecture10" >> /home/ec2-user/.my.cnf
          echo "host=${MyRDS.Endpoint.Address}" >> /home/ec2-user/.my.cnf

  # Elastic IP作成
  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # EIPをEC2にアタッチ
  MyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2Instance
      EIP: !Ref MyElasticIP

  # S3
  MyS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-s3-20240731 # AmazonS3にある既存のすべてのバケット名と異なる必要がある
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-s3

  # IAMRole
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-s3accessrole

  lecture10EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref S3AccessRole

  # RDS
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup
      SubnetIds:
        - !ImportValue PrivateSubnet1AID
        - !ImportValue PrivateSubnet1CID
      Tags:
        - Key: Name
          Value: dbsubnetgroup

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSSecret
      Description: RDS password for my RDS instance
      GenerateSecretString:
        SecretStringTemplate: "{\"username\":\"admin\"}"
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  MyRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: db.t3.micro
      AvailabilityZone: ap-northeast-1a
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: !Sub '{{resolve:secretsmanager:RDSSecret:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:RDSSecret:SecretString:password}}'
      MultiAZ: false
      StorageType: gp2
      VPCSecurityGroups:
        - !ImportValue RDSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-rdssg

  # ALBの作成
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${NameBase}-alb
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - !ImportValue ALBSecurityGroup
      Subnets:
        - !ImportValue PublicSubnet1AID
        - !ImportValue PublicSubnet1CID
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-alb

  # ターゲットグループの作成
  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${NameBase}-albtg
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue MyVPCID
      Targets:
        - Id: !Ref MyEC2Instance
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-algtg

      TargetType: instance
      UnhealthyThresholdCount: 2

  # リスナーの設定
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTG
          Type: forward
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

Outputs:
  EC2Instance:
    Value: !Ref MyEC2Instance
    Export:
      Name: EC2ID
